1. 머신러닝/통계 분석 체크리스트
이 단계의 목표는 데이터에 숨겨진 객관적인 규칙과 패턴(Ground-truth)을 발견하는 것입니다.
[ ] 데이터 정제 및 전처리: 
	- 설문조사 원본 데이터의 결측치, 이상치 처리 및 변수 정제
	
[ ] 여행자 그룹(Segment) 정의: 
	- '주요 관광 활동' 변수를 기반으로 행동적으로 유사한 그룹(시장 A: 트렌드/쇼핑, 시장 B: 자연/휴식 등)을 군집화
	- 타깃별 여행자 그룹화
	
[ ] '서울+alpha' 가설 검증 및 상관관계 분석: 
	- 가설 설정: "서울의 A 활동에 만족한 사람은 지방 B 지역에서도 만족할 것이다"라는 가설 수립
	- 교차분석 및 T-검정: '서울만 여행한 그룹'과 '서울+지방 여행 그룹'의 인구통계학적, 행동적 특성 차이 분석
	- 상관분석/회귀분석: 특정 서울 여행 스타일과 특정 지방 여행지의 만족도 간의 통계적 유의성 및 상관관계 도출
	
[ ] 결과 정리 및 규칙화:
	- 분석 결과를 바탕으로 각 여행자 유형을 정의하고, 그들의 '잠재 선호 지역'에 대한 명확한 규칙과 근거를 텍스트로 문서화

2. LLM 파인튜닝 체크리스트
이 단계의 목표는 1단계에서 발견한 규칙과 패턴을 LLM이 내재화하여, 사람처럼 추론하고 설명할 수 있도록 만드는 것입니다.
[ ] 고도화된 데이터셋 설계:
	- 지시(Instruction): 모든 데이터에 일관된, 분석 과업이 명시된 지시문 작성
		예시)
			다음은 한국을 방문한 관광객의 설문조사 데이터입니다. 이 데이터를 바탕으로 아래 항목에 따라 분석하고 결과를 생성하세요:
			1. 이 관광객의 핵심 '여행자 유형'을 분류하세요.
			2. 해당 유형의 주요 특징을 요약하세요.
			3. 이 관광객의 여행 스타일에 기반하여, 만족할 가능성이 높은 다른 지역(서울 또는 지방)에 대한 '잠재 선호도'를 분석하고 그 근거를 설명하세요.
			4. 추후 정보 검색에 활용할 '추천 지역 및 키워드'를 제시하세요.
			
	- 입력(Input): 전처리된 개별 관광객의 JSON 데이터
		예시)
			{
			  "id": "tourist-345",
			  "방문_도시": ["서울"],
			  "방문_기간": "5일",
			  "주요_활동": [
				"성수동 카페거리 방문",
				"더현대서울 쇼핑",
				"연남동 맛집 탐방",
				"K-POP 굿즈 구매"
			  ],
			  "연령": 24,
			  "국적": "말레이시아",
			  "여행_만족도": {
				"서울": 5
			  }
			}
			
	- 출력(Output): 아래 4가지 항목이 모두 포함된 '정답' 텍스트를 1단계의 분석 결과에 기반하여 작성
		여행자 유형 분류 (예: 서울 트렌드/미식 중심형)
		그룹 특징 요약
		잠재 선호도 및 추천 근거 (예: "이 유형은 통계적으로 강릉/부산에 높은 만족도를 보임")
		추천 지역 및 키워드 (RAG 시스템이 사용할 트리거)
		
		예시)
			## 1. 여행자 유형 분류
			* 서울 트렌드/미식 중심형

			## 2. 그룹 특징 요약
			최신 유행과 SNS 인기 장소에 민감하며, 쇼핑과 새로운 미식 경험을 여행의 핵심으로 생각하는 20-30대 그룹입니다. 
			일반적인 관광지보다 로컬들이 찾는 독특한 장소를 선호하는 경향이 있습니다.

			## 3. 잠재 선호도 및 추천 근거
			* **분석:** 이 여행자는 서울의 트렌디하고 활기찬 분위기에 높은 만족도를 보였습니다. 
				통계적으로 이러한 성향의 여행자들은 **지역 고유의 감성과 결합된 세련된 공간(카페, 편집샵)이 발달한 지방 도시**에서도 높은 만족도를 보이는 
				경향이 있습니다.
			
			* **결론:** 따라서 서울 외 **강원도 강릉**이나 **부산 서면/해운대** 지역을 방문할 경우
				, 서울과는 다른 자연/해변의 매력과 함께 트렌디한 문화를 즐길 수 있어 만족할 가능성이 매우 높습니다.

			## 4. 추천 지역 및 키워드
			* **추천 지역:** 강릉, 부산
			* **추천 키워드:** #감성카페, #로컬맛집, #힙플레이스, #해리단길, #전포카페거리


	목표 1. 입력 정보에 따른 출력 개인화
		→ ✔️ 입력에 있는 정보가 군집 평균과 어떤 점에서 유사/다른지를 비교한 문장을 포함
		
	✅ 목표 2. 출력에 따른 맞춤형 지역 추천
		→ ✔️ 해당 유형이 선호하는 지방 지역을 미리 정해두고, 조건 맞으면 자동 추천
		
	

[ ] 학습 데이터 생성 및 모델 훈련:
	- 다양한 유형(서울만, 지방만, 서울+지방)의 여행자 데이터를 포함하여 수백~수천 개의 (지시, 입력, 출력) 쌍 생성
	- 프로젝트에 적합한 기반 LLM(Pre-trained LLM)을 선택하여 파인튜닝 실행

[ ] 모델 성능 평가:
	- 별도의 테스트 데이터로 LLM이 여행자 유형을 정확히 분류하는지, 잠재 선호도를 논리적으로 잘 추론하는지 정성/정량 평가

3. 챗봇 프롬프트 엔지니어링 체크리스트 (RAG 포함)
이 단계의 목표는 똑똑해진 LLM을 실제 사용자 대화에 적용하여, 유연하고 고도화된 추천을 제공하는 것입니다.
[ ] 시스템 프롬프트 설계:
	- 챗봇의 페르소나, 역할(여행 전문가), 대화 목표, 말투 등 기본 가이드라인 설정
	- 사용자 정보를 직접 묻지 않고 간접적으로 파악하도록 하는 대화 전략 명시

[ ] 사용자 프로파일링 체인(Chain) 구현:
	- 대화 속에서 사용자의 관심사, 여행 기간, 선호 분위기 등의 정보를 추출
	- 추출된 정보를 바탕으로 파인튜닝된 LLM을 호출하여 '여행자 유형' 및 '잠재 선호도' 분석 결과를 내부적으로 확보

[ ] RAG (Retrieval-Augmented Generation) 체인 설계:
	- 지식 데이터베이스(Knowledge Base) 구축: 추천할 지역별 최신 정보(맛집, 카페, 축제, 교통편 등)를 담은 DB 또는 API 연동 준비
	- 트리거(Trigger) 설정: 파인튜닝 LLM이 생성한 추천 지역 및 키워드를 RAG 시스템의 검색어로 활용하도록 설정
	- Retriever 구현: 해당 키워드로 지식 DB를 검색하여 가장 관련성 높은 최신 정보를 가져오는 기능 구현

[ ] 최종 응답 생성 프롬프트 설계:
	- 아래 3가지 정보를 모두 조합하여 사용자에게 최종 답변을 생성하도록 프롬프트 구성
		(사용자 맥락): 현재 대화 내용
		(모델 분석 결과): "이 사용자는 강릉을 좋아할 가능성이 높다"는 Why
		(RAG 검색 결과): "강릉에는 현재 XX 카페가 인기 있다"는 What
			이를 통해 "강릉 여행도 좋아하실 것 같아요. 마침 현지인에게 인기 있는 XX 카페가 있는데 어떠세요?"와 같은 자연스럽고 구체적인 최종 메시지 생성

[ ] 지속적 개선 루프 구축:
	- 사용자 대화 로그를 분석하여 LLM이 잘못 추론하거나 RAG가 부적절한 정보를 가져오는 경우를 파악하고
		, 프롬프트와 지식 DB를 주기적으로 업데이트이 단계의 목표는 데이터에 숨겨진 객관적인 규칙과 패턴(Ground-truth)을 발견하는 것입니다.


군집기준
	고려 요인 빠짐
		2018: Q5_2A1 ~ Q5_2A3
		2019: Q5_2A1 ~ Q5_2A3
		2023: Q3_1a1 ~ Q3_1a3
		2024: Q3_1a1 ~ Q3_1a3
		
250718
	1. 여행객 군집화
		군집 1: kpop을 좋아하고, 쇼핑 비중이 많으며, 주로 아시아쪽 사람들이 많다.
			-> '쇼핑을 좋아하는 kpop형'
		군집 2: 자연경관을 좋아하고, 숙박 비용 비중이 많으며, 주로 유럽쪽 사람들이 많다.
			-> '조용한-액티비티형'
			
		...
		
	2. LLM 파인튜닝
		사용 데이터: 실제 군집화에 사용한 데이터의 일부 (2024년 설문조사)
		
		"instruction": "다음 대화에서 사용자의 여행 스타일을 분석하여 군집과 핵심 특징을 JSON 형식으로 추출해줘.",
		
		"input": # 실제 데이터를 사용자 query 처럼 바꿈
			"안녕하세요! 여행지 추천 좀 받으려고요. 저는 20대 여자이고요
			, 이번에 혼자 조용히 쉬면서 서핑 같은 것도 좀 해보고 싶어요. 
			예산은 100만원 안으로 생각하고 있어요. 기간은 3박 4일 정도요."
		
		"output": { # 실제 데이터를 json으로 (cluster를 특징 짓는 중요 변수 위주로 추출)
		  "cluster": 2(조용한-액티비티 형),
		  "features": {
			"여행 스타일": ["휴양", "맛집탐방"],
			"여행 기간": "3박 4일",
			"예산": "100만원 이하",
			"선호 지역": "조용한 곳",
			"필수 활동": "서핑"
		  }
		}
		
		파인튜닝 모델: Phi-2 (2.7B) (gpt 추천)
			GPU 메모리: QLoRA 4bit 기준 8~10GB 정도 사용
			학습 속도: 빠름 (3090에서 10,000개 데이터 2~3시간 내 가능)
			성능: 작지만 "instruction-following"에 강함
			적합한 작업: JSON 추출, 클러스터 분류, 피쳐 태깅 등
			💬 예시 instruction:
			"사용자의 여행 성향을 보고 클러스터 번호와 특징을 JSON으로 추출하세요."
			이런 형태 잘 따라합니다.
			
		파인튜닝 스펙: GPU 3070/3090 (24번, 22번 서버) 혹은 colab
		
	3. LLM - 사용자 interaction
		* step1) LLM이 군집을 분류할 때 까지 사용자와 interaction 
		
		step2) 군집정보와 LLM이 군집에 분류하기 위한 키워드 추출
				
		step3) 추출한 키워드로 의미적으로 가장 유사한 tour API 카테고리 매핑
		
			지역 추천은 이미 정의된 클러스터링 
			+ 사용자가 구체적인 체제기간을 제시하면 거리를 고려하여 방역권 키워드로 추출
			예) 선호도 키워드: 휴양 (LLM 추출 키워드) -> 휴양관광지 (tour API 카테고리)
				, 7일 -> [경기, 인천, 전라, 경상, ... , 제주]
			
		step4) 매핑된 카테고리 코드로 tour API 호출
		step5) top 10 추천 지역 제시
			+ 추천 지역의 우선순위에 대한 기준 필요
		LLM -> output feature
			{"휴양", "맛집탐방", 3박 4일, 100만원 이하, 조용한 곳, 서핑}
			
		LLM output feature <-> API 코드 매핑	
			LLM feature(휴양) <-> API 카테고리 이름(자연 관광지) by 유사도가 가장 큰 카테고리 value 찾아냄
			API <->
		
		API request
			<관광타입></관광타입>

250720		
	1. LLM이 군집을 분류할 때 까지 사용자와 interaction 
		LLM은 파인튜닝과정에서 질문자의 query를 json으로 바꿔주는 것을 학습 한다.
		json에 있는 내용 질문자 query를 가지고 알아서 클러스터를 추정할 수 없다.
		
		따라서 클러스터를 추정하는 langchain을 하나 구현하여야 할 것이다.
		여기에 있는 langchain은 미리 구현된 클러스터링 알고리즘을 활용하여 새로운 정보에 대한 클러스터를 추론하는 역할을 담당한다.
		단, 비지도 학습에서는 어느 특정 값의 클러스터링을 추정할 때 모든 변수가 필요하다.
		사용자와 llm이 대화할때는 정보가 누락되는 부분이 있기때문에 다수의 변수에는 결측값이 나타나게 된다.
		
		방법1) 사용자와의 대화에서 결측 변수가 나타나면 이를 최빈값/평균으로 대체한다.
			-> 단, 최빈값, 평균값이 어느 특정 클러스터에 편향되면 잘못된 클러스터로 추정될 수 있다.
		
		방법2) 클러스터를 예측하는 분류기 (lightGBM 혹은 XGBoost)를 만든다.
			-> LightGBM이나 XGBoost 같은 최신 트리 기반 모델들은 결측값을 스스로 알아서 처리하는 매우 뛰어난 로직을 내장하고 있습니다. 
				결측값을 특정 값으로 채우는 대신, "이 변수의 값이 누락되었다"는 사실 자체를 하나의 중요한 정보로 
				사용하여 데이터가 어느 경로로 가야 할지 학습
				
		위 두가지 방법 모두 사용자의 query로  얼마나 클러스터를 자신있게 추정할 수 있는가에 대한 기준은 필요할 것이다.
		그 기준까지 llm과 사용자는 계속 자연스럽게 interaction한다.
	
		* 이 과정이 과제와 부합하는가?
			단순 키워드에 의존하는 획일적인 추천 방식에서 벗어나, 머신러닝 군집 분석으로 방한 관광객의 행동 패턴을 정량적으로 추정합니다. 
			이는 **'누구를, 어떻게 공략할 것인가'**라는 과제의 핵심 질문에 대한 데이터 기반의 해답이며
			, 성공적인 타겟별 유치 방안을 수립하는 전략적 나침반 역할을 수행합니다.

	2. 추출한 키워드로 의미적으로 가장 유사한 tour API 카테고리 매핑
		RAG에 사용하기 위해 던져줘야 하는 키워드
			llm이 사용자의 군집을 추정
			사용자 query에서 사용자 키워드를 추출
			API의 카테고리 코드와 매핑
			
			사용자 질문: "이번엔 쇼핑은 좀 지겨워서, 조용히 쉴 만한 산이 없을까요?"
			1. LLM 키워드 추출: [휴식, 조용한 곳, 산]

				1) 카테고리 코드 매핑
					https://api.visitkorea.or.kr/#/useInforService
					
					대분류 vector []
					중분류 vector []
					소분류 vector []
					
					pooling vector [mean (대/중/소)]
						vs
					소분류 vector []
					
				2) 지역 코드 매핑
					군집A: 서울 집중형 -> [서울, 인천, 경기]
					군집B: 서울 + 지방 방문 -> [인천, 경기, 경상, 전라 등등]
			
			2. 가장 유사한 API 코드 찾음
				http://apis.data.go.kr/B551011/KorService1/areaBasedList1?numOfRows=12&pageNo=1&MobileOS=ETC&MobileApp=AppTest&ServiceKey=인증키&listYN=Y&arrange=A&contentTypeId=&areaCode=&sigunguCode=&cat1=A01&cat2=A0101&cat3=A01010400
				1) 카테고리 코드 매핑
					<cat1>A01</cat1>
					<cat2>A0101</cat2>
					<cat3>A01010400</cat3>
			
				2) 지역 코드 매핑
			
			
				
			군집 중요 변수: [휴식]
			
			문제: 
			❗ 트래픽 제한	일 1,000건 → detailCommon1은 개별 호출이라 현실적 한계
			❗ 매핑 어려움	사용자 의도 ↔ 관광지 속성(유형, 지역) 간 표현력 부족
			❗ 성능 문제	overview 기반 similarity 계산은 느리고 고비용
		
			 API 기반 수집 → 자체 벡터DB 구축 → 정기 업데이트 방식 사용하여야함
	
	RAG 사용 방법
		희준: 보고서 시작
		승연: RAG 구체화
		~수요일
		
		구현 완료: ~ 금요일
		보고서 작성: ~ 일요일
		
		
	(1) 질의자 추천과 군집프로파일링 정보를 input으로 넣음
	(2) 의미적으로 비슷한 장소를 vector db에서 찾음
	
	main.py
	input
	
	cluster 추정 (별도 파일 빼서 함수 호출)
	retriever (별도 파일 빼서 함수 호출)
	generator (별도 파일 빼서 함수 호출)
		
	문제점:
		문제1: 클러스터를 무조건 추정해버림
	
		query: 나 저번에 남산타워 갔었는데, 사람많아서 좀 별로 였거든? 유명하긴 한데 사람 덜 있는거 있어?
		
		추정 클러스터: [클러스터 2: 한국을 처음 방문한 20대 젊은 여성 여행객. 짧은 기간 서울에 머물며 음식, 쇼핑 
			등 모든 분야에서 압도적인 소비력을 보여주는 럭셔리 여행을 즐김.
		
		답변
			안녕하세요! 서울에서의 특별한 여행을 계획하고 계시는 것 같군요. 남산타워에서의 혼잡함이 아쉬웠다면, 다음의 두 곳을 추천해 드릴게요. 
			이곳은 뷰와 분위기를 만끽할 수 있으면서도 비교적 덜 붐비는 공간입니다. 곳을 추천해 드릴게요. 

			### 1. 씨엘로957
			- **추천 이유**: 씨엘로957은 호수를 바라보며 조용하고 편안한 분위기를 즐길 수 있는 공간입니다. 
			이곳은 사진찍 기에도 좋은 장소로 알려져 있어, 아름다운 경치를 배경으로 멋진 사진을 남길 수 있습니다.
			
			- **주요 특징 및 후기**: "뷰 좋음"과 "경치 좋아요"라는 평이 많으며
				, 사람이 밀려드는 경우도 있지만, 남산타워에 비해 상대적으로 덜 붐비는 편입니다. 일부 후기에서는 "소문만은 못한 것 같고, 불친절"이라는 의견이 있지만, 뷰 와 분위기가 좋다는 점은 확실합니다. 이곳에서 여유롭게 시간을 보내며 좋은 경험을 하실 수 있을 거예요.

			### 2. DH네상스호텔
			- **추천 이유**: 이곳은 청결하고 친절한 서비스로 알려져 있으며, 서울의 주요 명소와의 접근성이 좋습니다. 고급 스러운 숙박을 원하신다면 좋은 선택이 될 것입니다.
			- **주요 특징 및 후기**: "가격이 싸서 기대 안하고 갔는데 생각보다 넓고 깨끗해서 깜짝 놀랐어요"라는 후기가 있 습니다. 또한, "위치적으로 제일 좋았어요"라는 의견이 많아, 쇼핑과 관광을 즐기기에 최적의 장소입니다. 여유롭게 휴식을 취한 후 주변을 탐방하시기에 좋은 곳입니다.
					
		실제로 RAG에서 쇼핑과 관련된 곳을 우선적으로 추천함.
			클러스터를 명확히 추정할 수 없다면 클러스터 프로파일링 없이 rag에 쿼리를 보내는것이 나을 거 같음
	
	
	
	구현하면 좋을것 같은거：
		근교 추천、 지방 추천 에 대한 기준이 필요할 것 같다。
		
		서울 근교 질문
			"주말에 서울 근교로 당일치기 드라이브 가고 싶은데, 경치 좋은 곳 좀 추천해 줘."
			"대중교통으로 갈 수 있는 서울 근교 여행지 없을까? 예쁜 카페나 산책로가 있었으면 좋겠어."
			"이번 주에 연차 썼는데, 서울 근교에서 하루 푹 쉬다 올 만한 한적한 장소 추천해 줘."
			
		지방 장기 여행 추천 질문
			"시간 여유가 많아서 2주 정도 지방으로 푹 쉬러 떠나고 싶어. 서울이랑 완전 다른 느낌의 조용한 곳이면 좋겠어."
			"전라도 쪽으로 일주일 정도 맛집 투어 여행을 계획 중이야. 꼭 가봐야 할 도시나 식당 위주로 알려줄래?"
			"사람들이 잘 모르는 국내 여행지 중에, 최소 5일 이상 머물면서 그 지역을 깊게 경험할 수 있는 곳 추천해 줘."	
